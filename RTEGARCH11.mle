# QMLE for RT-EGARCH(1,1)
QMLE_EGARCH11 = function(y){
  n =length(y)
  sigma = rep(0,n)
  h =rep(0,n)
  log_l = rep(0,n)
  eps.mean = sqrt(2/pi)
  
  negloglike.log = function(theta){
    eps_bar = rep(0,n)
    d_eps_d_y = rep(0,n)
    h[1] = (theta[1] + (theta[4]+theta[6])*eps.mean )/(1-theta[2])
    sigma[1] = exp(h[1]/2)
    eps_bar[1] = y[1]/sigma[1]
 
    for (i in 2:n){
      # calculate eps_bar[i] by Newton method
      eps_bar[i] = eps.Newton11(y[i],h[i-1],eps_bar[i-1],theta)
      
      # update h
      h[i] = theta[1] + theta[2]*h[i-1]  + theta[3]* eps_bar[i] +theta[4]*(abs( eps_bar[i])) + theta[5]*eps_bar[i-1] +theta[6]*(abs(eps_bar[i-1]))      
      sigma[i] = exp(h[i]/2)
      # likelihood
      log_l[i] = -0.5*log(2*pi)-0.5*(y[i]/sigma[i])^2 - log( sigma[i]+0.5*(theta[3]+theta[4]*sign(y[i]))*y[i] )
    }
    negloglike = -sum(log_l[2:n])
    return(negloglike)
  }
  ## optim
  ui = rbind(c(0,1,0,0,0,0),c(0,-1,0,0,0,0),c(0,0,1,1,0,0),c(0,0,-1,1,0,0))
  ci = c(0,-1,0,0)
  initial = c(0.01,0.9,-0.01,0.02,0,0)
  theta = constrOptim(initial,negloglike.log,ui=ui,ci=ci,method = "Nelder-Mead")$par
  
  # initial values
  p = length(theta)
  eps_bar = rep(0,n)
  g = rep(0,n)
  d_g_d_theta = matrix(0,nrow=p,ncol=n) 
  d_h_d_theta = matrix(0,nrow=p,ncol=n) 
  d_l_d_theta = matrix(0,nrow=p,ncol=n) 
  Sigma1 = matrix(0,nrow=p,ncol=p*n) 
  
  d2_l_d2_theta = matrix(0,nrow=p,ncol=p*n)

  h[1] = (theta[1] + (theta[4]+theta[6])*eps.mean )/(1-theta[2])
  sigma[1] = exp(h[1]/2)
  g[1] = 1 + 0.5*(theta[3]*y[1]+theta[4]*abs(y[1]))/sigma[1]
  eps_bar[1] = y[1]/sigma[1]
  
  for (i in 2:n){
    # calculate eps_bar[i] by Newton method
    eps_bar[i] = eps.Newton11(y[i],h[i-1],eps_bar[i-1],theta)

    # update h
    h[i] = theta[1] + theta[2]*h[i-1]  + theta[3]* eps_bar[i] +theta[4]*(abs( eps_bar[i])) + theta[5]*eps_bar[i-1] +theta[6]*(abs(eps_bar[i-1]))      
    sigma[i] = exp(h[i]/2)
    # likelihood
    log_l[i] = -0.5*log(2*pi)-0.5*(y[i]/sigma[i])^2 - log( sigma[i]+0.5*(theta[3]*y[i]+theta[4]*abs(y[i])) )
    
    ### standard error
    # first order
    g[i] = 1 + 0.5*(theta[3]*y[i]+theta[4]*abs(y[i]))/sigma[i]
    d_h_d_theta[,i] = ( c(1,h[i-1],y[i]/sigma[i],abs(y[i]/sigma[i]),y[i-1]/sigma[i-1],abs(y[i-1]/sigma[i-1])) + ( theta[2] - (theta[5]*eps_bar[i-1]+theta[6]*abs(eps_bar[i-1]))/2 )*d_h_d_theta[,(i-1)] )/g[i]
    d_g_d_theta[,i] = 0.5*( c(0,0,y[i]/sigma[i],abs(y[i]/sigma[i]),0,0) - (theta[3]*y[i]+theta[4]*abs(y[i]))/(2*sigma[i])*d_h_d_theta[,i] )       
    d_l_d_theta[,i] = 0.5*((y[i]/sigma[i])^2 - 1)*d_h_d_theta[,i] - d_g_d_theta[,i]/g[i]
    Sigma1[,(p*(i-1)+1):(p*i)] = d_l_d_theta[,i]%*%t(d_l_d_theta[,i])
    
    # second order
    d2_l_d2_theta[,(p*(i-1)+1):(p*i)] = ( ( (theta[3]*eps_bar[i]+theta[4]*abs(eps_bar[i]))/(8*g[i])*(eps_bar[i]^2 - 2  + (theta[3]*eps_bar[i]+theta[4]*abs(eps_bar[i]))/g[i]) - 0.5*eps_bar[i]^2 )*d_h_d_theta[,i]%*%t(d_h_d_theta[,i])
                                          - 1/(4*g[i]^2)*c(0,0,y[i]/sigma[i],abs(y[i]/sigma[i]),0,0)%*%t(c(0,0,y[i]/sigma[i],abs(y[i]/sigma[i]),0,0))
                                          
    )
  }
  loglike = sum(log_l[2:n])
  eps = eps_bar
  # ### calculate Fisher information matrix and Hessian matrix
  I = matrix(0,p,p)
  H = matrix(0,p,p)
  for(k in 2:n){
    I = I + Sigma1[,(p*(k-1)+1):(p*k)]
    H = H + d2_l_d2_theta[,(p*(k-1)+1):(p*k)]
  }
  I = I/(n-1)
  H = H/(n-1)
  inv_H = solve(-H)
  
  standerror1 = sqrt(diag(inv_H%*%I%*%inv_H))/sqrt(n-1)
  standerror2 = sqrt(diag(solve(I)))/sqrt(n-1)
  standerror3 = sqrt(diag(solve(-H)))/sqrt(n-1)
  return(list(par=theta,liklihood=loglike,h=h, residual=eps, std=c(standerror1,standerror2,standerror3 ) ))
}
